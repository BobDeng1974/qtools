/*! @page qutest QUTest&trade; Unit Testing Harness

@image html qutest_banner.jpg

<p><strong>QUTest&trade;</strong> (pronounced '_cutest_') is a **unit testing harness**, which is specifically designed for deeply embedded systems, but also supports unit testing of embedded code on host computers ("dual targeting"). QUTest&trade; is the fundamental tooling for <a href="https://en.wikipedia.org/wiki/Test-driven_development" target="_blank" class="extern"><strong>Test-Driven Development (TDD)</strong></a> of <a href="https://state-machine.com/products/#QP" target="_blank" class="extern">QP/C/C++ applications</a>, which is a highly recommended best-practice.
</p>

@htmlonly
<img style="float:left; margin:10px 8px 8px 15px; clear:right;" src="img/tddbook.gif" title="TDD Book">
@endhtmlonly


@note
Even though QUTest&trade; has been primarily designed for testing of <a href="https://state-machine.com/doc/concepts#HSM" target="_blank" class="extern">QP state machines</a>, it can also be used to test **any embedded C or C++ code**. To demonstrate this capability, the QUTest&trade; comes with several examples of testing embedded code from the book <a href="https://wingman-sw.com/test-driven-development-for-embedded-c-book" target="_blank" class="extern">"Test-Driven Development for Embedded C"</a> by James W. Grenning. These tests include examples of such techniques as using <a href="https://martinfowler.com/bliki/TestDouble.html" target="_blank" class="extern">test doubles</a> and <a href="https://en.wikipedia.org/wiki/Mock_object" target="_blank" class="extern">mocks</a> with QUTest&trade;.@n@n@n


@image html qutest_ex.png "Example of a QUTest&trade; session on an embedded board (EFM32-SLSTK)"


<div class="separate"></div>
@subsection qutest_special What's Special about QUTest&trade;?
Unlike other existing unit testing harnesses for embedded systems (e.g., <a href="http://www.throwtheswitch.org/white-papers/unity-intro.html" target="_blank" class="extern">Unity</a> or <a href="http://cpputest.github.io/" target="_blank" class="extern">CppUTest</a>) QUTest&trade; is **not based on** <a href="https://en.wikipedia.org/wiki/XUnit" target="_blank" class="extern"><strong>xUnit</strong></a>, which was originally designed to run tests on host computers. Instead, QUTest&trade; is geared towards unit testing of **deeply embedded systems**. Here is a list of QUTest&trade; unique features, specifically designed for this purpose:

- QUTest&trade; separates the *execution* of the CUT (Code Under Test) from *checking* of the "test assertions". The embedded target is concerned only with running a *test fixture* that exercises the CUT and produces QP/Spy&trade; trace, but it does *not* check the "test assertions". Checking the "test assertions" against the expectations is performed on the host computer by means of *test scripts*. This approach is more intuitive for embedded developers and actually simplifies the development of all sorts of <a href="https://martinfowler.com/bliki/TestDouble.html" target="_blank" class="extern">test doubles</a>, including <a href="https://en.wikipedia.org/wiki/Mock_object" target="_blank" class="extern">mocks</a>, *without breaking encapsulation* of the CUT.

- QUTest&trade; is a unique test harness on the embedded market that supports **scripting**. QUTest *test scripts* run on the Host, which skips compilation and uploading the code to the Target and thus shortens the TDD micro-cycle.

- QUTest&trade; supports **resetting the Target** for each individual test, if needed. This goes far beyond providing test `setup()` and `teardown()` functions that other test fixtures offer (and of course QUTest supports as well). Clean reset of the Target avoids erroneous tests that implicitly rely on side effects from previously executed code. This is particularly important important for embedded systems and for state machines, so that each test can start from a known initial condition.

- QUTest&trade; *test fixtures* that run on the Target **do not require dynamic memory** allocation (`malloc()/free()` in C or `new/delete` in C++). This means that you don't need to commit any of your precious embedded RAM to the heap (set the heap size to zero) and you don't need to link the heap management code. Avoiding dynamic memory allocation is one of the best practices of real-time embedded programming, which you don't need to compromise to run QUTest.

- QUTest&trade; *test fixtures* that run on the Target **do not require non-local jumps** (`setjmp()()/longjmp()` in C or `throw/catch` in C++), which are needed by other test harnesses to discontinue failing tests. QUTest&trade; *test fixtrues* do not need to discontinue failing tests, because they don't check "testing assertions". A failing test just waits for target reset commanded by a *test script*.

- QUTest&trade; *test fixtures* can be based on the actual **application code**. For example you can reuse the same `main()` function in a *test fixture* and in your final application. This means that you can either grow your *test fixture* into a final application through TDD, or you can more easily add unit tests to an existing application.

@note
Even though QUTest&trade; is particularly suitable for running tests on deeply embedded targets, it also fully supports running *the same* tests on your @ref qutest_host "host computer". In fact, running the tests as much as possible on the host and thus avoiding the target-hardware bottleneck is the highly recommended best-practice of embedded TDD. QUTest&trade; supports **fully-automated** unit testing, both on the embedded target and on the host computer.


-------------------------------------------------------------------------------
@section qutest_install Installing QUTest&trade; and Tcl
QUTest&trade; is bundled with QSPY and is installed automatically when you @ref install "install QTools". Specifically, `QUTest` consists of the <span class="img file_tcl">qspy.tcl</span> and <span class="img file_tcl">qutest.tcl</span> Tcl scripts located in the @ref qspy_files "qtools/qspy/tcl" folder.

@attention
Even though QUTest&trade; is implemented in <a href="http://www.tcl.tk/man/tcl8.4/" target="_blank" class="extern">Tcl (Tool Command Language)</a>, you don't need to know Tcl to write effective tests with QUTest&trade;. The @ref qutest_tut "actual tests" that you will write utilize a small, carefully designed set of commands that form a small <a href="https://en.wikipedia.org/wiki/Domain-specific_language" target="_blank" class="extern">DSL (Domain Specific Language)</a> for unit testing. The Tcl interpreter just happened to be an effective vehicle to implement this "Unit Testing DSL".


<div class="separate"></div>
@subsection qutest_windows Windows
In order to run `QUTest`, you need the <em>Tcl interpreter</em> called **tclsh** installed on your machine. `tclsh` (version 8.4) is included in the QTools collection for Windows, so it will be available if you @ref install "install QTools&trade;". Also, the Tcl/Tk distribution included in QTools has been already extended with the @ref qspy_udp "UDP-Sockets" for Tcl, so you can use the `tclsh` and `wish` interpreters "as is" without any additional modifications.

<div class="separate"></div>
@subsection qutest_linux Linux
On Linux, Tcl/Tk is usually installed, but you need to augment the standard Tcl/Tk distribution with the UDP Sockets for Tcl.

@note
In order to communicate with the QSPY back-end, QUTest requires the Tcl interpreter extended with **UDP Sockets**. Istructions of adding UDP Sockets to Tcl are included in the QTools collection for Linux, in the <span class="img folder">tcludp</span> folder (see @ref qspy_files "QSPY directories and files")


------------------------------------------------------------------------------
@section qutest_struct QUTest&trade; Structure
Testing with QUTest&trade; involves the following components:
-# A **test fixture** code that is written in C (or C++) and runs in your embedded Target (or on the host as a host-executable). The **test fixture** is linked with the **stub** of the QP framework (see <a href="https://state-machine.com/qpc/qutest_8c.html" target="_blank" class="extern">`qutest.c`</a>), which provides the complete QP API to your <b>CUT</b> (<b>C</b>ode <b>U</b>nder <b>T</b>est), but instead of actually running the code as a QP application, it waits for and executes commands from the @ref qspy "QSPY" host application. The design of *test fixtures* is explained in the @ref qutest_tut "QUTest&trade; Tutorial".

-# The @ref qspy "QSPY" host application started with the `-u` @ref qspy_command "command-line option" (UDP socket) and with the proper communication link for your Target (e.g., `-t` @ref qspy_command "command-line option" (TCP/IP) link for a host executable);

-# A **test script** that drives the tests and checks the generated QSPY output against the expectations ("test-assertions"). The design of *test scripts* is explained in the @ref qutest_tut "QUTest&trade; Tutorial".

The sequence diagram below shows the communication between these QUTest&trade; components. The embedded Target is running a **test fixture** code that communicates with @ref qspy "QSPY" over the Target data link (<span style="color:red"><strong>red arrows</strong></span>). This communication is based on the @ref qpspy_proto "QP/Spy Protocol". The QUTest&trade; (Tcl script) attaches to the @ref qspy_text "UDP text channel" of the QSPY host application. This communication uses the @ref qspy_text "QSPY text format" (<span style="color:green"><strong>green arrows</strong></span>) for data forwarded from the Target and binary format for commands sent to the Target
(<span style="color:blue"><strong>blue arrows</strong></span>).

@note
The QUTest Front-End attaches to the @ref udp_channel "text-channel" of the UDP socket served by QSPY.


@image html qspy_qutest.gif "Communication between Target, QSPY, and QUTest"

<ul class="tag">
  <li><span class="tag">A</span> The QUTest&trade; front-end sends commands to the QSPY (e.g., target reset), which are relayed to the Target

  <li><span class="tag">B</span> The Target responds by sending QS trace records to QSPY, which parses them and sends the text-format to QUTest. The QUTest then compares the produced output to the expected output (checks the "test assertions")
  </li>

  <li><span class="tag">C</span> UDP packets with  @ref qpspy_proto "Record-ID" in the range `128..255` are not relayed to the Target, but instead are used for communication between the QUTest&trade; Front-End and the QSPY Back-End.
  </li>
</ul>

@note
As you can see, the QUTest structure separates test execution from checking the test expectations (a.k.a. "test assertions"). This leads to a testing strategy most suitable to deeply embedded systems, where the embedded Target needs to execute only a minimal **test fixture** code, while actual driving of the tests and checking "test assertions" is performed on a powerful host computer. In practice, a well designed *test fixture* can serve many tests, which greatly increases the flexibility of testing, because tests are just scripts, which run in seconds and don't require compilation and uploading to the Target.


<div class="separate"></div>
@subsection qutest_host Host Executable
The general QUTest&trade; structure just described corresponds to running tests on an embedded Target. But QUTest&trade; can also execute tests on the **host computer**. In that case (shown in the figure below), the **test fixture** is a host executable that communicates with the QSPY host application via a TCP/IP socket (QSPY started with the `-t` @ref qspy_command "command-line option"). In this case all QUTest&trade; components executes on the host computer.

@image html qspy_host.gif "QUTest with Host Executable"


-------------------------------------------------------------------------------
@section qutest_run Running QUTest&trade;
From the description so far it should be clear that before starting QUTest, you need to make sure that the @ref qspy "QSPY" host application is running on this machine with the `-u` @ref qspy_command "command-line option". QSPY can be launched from a command-prompt and should connect to the Target system of your choice. You can also use the `-t` to open a TCP/IP socket for connecting host executables as Targets. For example, to start QSPY and open a TCP/IP connection, you can open a command prompt and type:

@verbatim
qspy -u -t
@endverbatim

Second, because QUTest&trade; is implemented as a Tcl script, it requires the Tcl interpreter called **tclsh** (Tcl shell) to run. This Tcl interpreter needs to be augmented with the <a href="http://tcludp.sourceforge.net/" target="_blank" class="extern">UDP socket extension</a>, because the standard Tcl/Tk distributions typically don't support UDP. (<strong>NOTE:</strong> The Tcl interpreters included in the <a href="https://sourceforge.net/projects/qpc/files/qtools" target="_blank" class="extern">QTools collection for Windows</a> are already augmented with the UDP socket extension, so you don't need to do anything to use them for `QSpyView`).

Once QSPY is running, you can run QUTest from a Windows command-prompt by typing:

@verbatim
tclsh %QTOOLS%\qspy\tcl\qutest.tcl
@endverbatim

This would launch `qutest` in the current directory and look for test scripts (`*.tcl` files) to execute them as tests.

@attention
Typically, the `qutest.tcl` script is started from a `Makefile`, which also builds the code under test (CUT) and loads it into the Target. The following @subpage qutest_tut "QUTest&trade; Tutorial" introduces QUTest&trade concepts while the @subpage qutest_ref "QUTest&trade; Reference" goes into more detail.


<div class="separate"></div>
@subsection qutest_exa QUTest&trade; Examples
The QUTest&trade; examples are co-located with the QP frameworks to which they pertain.

- QUTest&trade; examples for the <a href="https://state-machine.com/qpc" target="_blank" class="extern"><strong>QP/C framework</strong></a> are located in the QP/C installation directory, in the sub-directory <span class="img folder">`qpc\examples\qutest`</span>.
- QUTest&trade; examples for the <a href="https://state-machine.com/qpcpp" target="_blank" class="extern"><strong>QP/C++ framework</strong></a> are located in the QP/C++ installation directory, in the sub-directory <span class="img folder">`qpcpp\examples\qutest`</span>


@next{qutest_tut}
*/

