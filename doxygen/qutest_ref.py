## @page qutest_script QUTest&trade; Script Reference
#
# @tableofcontents
#
# <p>A QUTest *test script* contains a group of related tests (a *test group*).
# The basic job of these tests is to send commands to the @ref qutest_fixture
# "test fixture" running in the Target and to compare the @ref qspy_text
# "QSPY textual output" produced by the Target with the
# <a href="https://www.state-machine.com/glossary#test_expectation" class="extern"><b>expectations</b></a>
# of the tests.
# </p>
#
# The QUTest *test scripts* are executed in the host by the "QUTest front-end"
# that communicates with the @ref qspy "QSPY" host application via the
# @ref qspy_udp "UDP interface". The "QUTest front-end" is itself implemented
# in [Python](https://www.python.org/) (see <span class="img #file_py">`qutest.py`</span>).
# This qutest.py file defines a small Domain Specific Language (DSL) for writing QUTest *test scripts*.
#
# ![](logo_python27-python3.gif)
#
#
# ----------------------------------------------------------------------------
# @section qutest_qspy Categories of QSPY Output
# To write effective *test scripts* you need to understand the main categories
# of QSPY output, which are illustrated in the picture below:
#
# ![Categories of QSPY output](qspy_cat.png)
#
# <dl class="tag">
#   <dt>[0]</dt><dd> Information output generated internally by QSPY. This output is *not* sent to *test scripts*.
#   </dd>
#   <dt>[1]</dt><dd> Dictionary trace records generated by the Target. This output is *not* forwarded to *test scripts*.
#   </dd>
#   <dt>[2]</dt><dd> Acknowledgement trace records generated by the Target.
#  This output *is* forwarded to *test scripts*, but is checked automatically and implicitly by the *test commands*.
#   </dd>
#   <dt>[3]</dt><dd> Trace records generated by the Target. This output *is*
# forwarded to *test scripts* and must be checked **explicitly** by test expectations.
#   </dd>
# </dl>
# <div style="clear:both;"></div>
#
# ----------------------------------------------------------------------------
# @section qutest_dsl QUTest Scripting DSL
#
# @code
# @brief fills data into the Target.
# @description
# This command fills provided data at the given offset from the
# start address of the current_obj() inside the Target.
#
# @param[in] offset offset [in bytes] from the start of the current_obj()
# @param[in] size   size of the data item (1, 2, or 4)
# @param[in] num    number of data items to fill
# @param[in] item   data item to fill with
#
def fill(offset, size, num, item = 0):
# @endcode
#
# @code
# @brief skip the tests following this command.
#
# @description
# @param[in] nTests number of tests to skip (default-all remaining tests)
#            e.g. skip(1) will skip one test following this command.
#
def skip(nTests = 9999):
# @endcode

